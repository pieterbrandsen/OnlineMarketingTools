@page "/listpersons"
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using OnlineMarketingTools.Core.Entities
@inject PersonHttpRepository PersonHttpRepository
@inject IJSRuntime IJSRuntime
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider


<h3>
	Person List
</h3>
<AuthorizeView>
@if (persons is null)
{
	<p>Loading</p>
}
else if (persons.Count() is 0)
{
	<p>No Notes Found</p>
}
else if (persons is not null)
{
	<table class="table table-striped small table-sm">
		<thead>
			<tr>
				<th>Id</th>
				<th>FirstName</th>
				<th>LastName</th>
				<th>Country</th>
			</tr>
		</thead>
		<tbody>
			@foreach (PersonIntegrated person in persons)
			{
			<tr>
				<td>@person.Id</td>
				<td>@person.FirstName</td>
				<td>@person.LastName</td>
				<td>@person.Country</td>
				@*<td>
			<a class="btn btn-sm btn-success small" @onclick="@(() => Method())">Button Text</a>
			<a class="btn btn-sm btn-danger small" @onclick="@(() => Method())">Button Text</a>
		</td>*@
			</tr>
			}
		</tbody>
	</table>

	<PersonTableComponent Persons="persons"></PersonTableComponent>
}
</AuthorizeView>

@code {
	private ICollection<PersonIntegrated> persons { get; set; }

	protected override async Task OnInitializedAsync()
	{
		var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
		var user = authState.User;

		try
		{
			persons = await PersonHttpRepository.GetAllAsync<PersonIntegrated>("api/person");
		}
		catch (AccessTokenNotAvailableException ex)
		{
			await IJSRuntime.InvokeAsync<bool>("confirm", $"{ex}");
			//ex.Redirect();
		}
	}
}